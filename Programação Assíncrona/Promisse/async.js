/*
    NO JAVASCRIPT, A PALAVRA-CHAVE ASYNC É USADA PARA DEFINIR UMA FUNÇÃO ASSÍNCRONA. FUNÇÕES ASSÍNCRONAS SÃO FUNÇÕES QUE RETORNAM UMA PROMISE E PERMITEM USAR A PALAVRA-CHAVE AWAIT DENTRO DELAS.
*/

async function somar(a, b) {
    return a + b
}

// RETORNA O Object, QUE É: Promise
console.log(somar(2, 2))

// RETORNA O RESULTADO DA Promise
somar(2, 2).then((resultado) => {
    console.log(resultado)
})

/*
    A PALAVRA-CHAVE AWAIT É USADA PARA PAUSAR A EXECUÇÃO DE UMA FUNÇÃO ASSÍNCRONA ATÉ QUE UMA PROMISE SEJA RESOLVIDA E RETORNA O RESULTADO DA PROMISE. ISSO PERMITE ESCREVER CÓDIGO ASSÍNCRONO DE FORMA MAIS SÍNCRONA, O QUE MUITAS VEZES TORNA O CÓDIGO MAIS LEGÍVEL E FÁCIL DE ENTENDER.
*/

// FUNÇÃO ASSÍNCRONA QUE RETORNA UMA Promise
async function exemploAssincrono() {
    // SIMULA UMA OPERAÇÃO ASSÍNCRONA, COMO UMA CHAMADA DE API
    const resultado = await operacaoAssincrona()

    // AQUI O CÓDIGO ESPERA ATÉ Q A OPERAÇÃO ASSÍNCRONA SEJA CONCLUÍDA
    console.log(resultado) 
}

// FUNÇÃO Q RETORNA UMA Promise PARA SIMULAR UMA OPERAÇÃO ASSÍNCRONA
function operacaoAssincrona() {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve('Operação assíncrona concluída!')
        }, 1000);
    })
}

/*
    NESTE EXEMPLO, EXEMPLOASSINCRONO() É UMA FUNÇÃO ASSÍNCRONA QUE CHAMA OPERACAOASSINCRONA() USANDO AWAIT PARA ESPERAR ATÉ QUE A OPERAÇÃO ASSÍNCRONA SEJA CONCLUÍDA. ASSIM QUE A PROMISE RETORNADA POR OPERACAOASSINCRONA() FOR RESOLVIDA, O VALOR SERÁ ARMAZENADO EM RESULTADO E SERÁ EXIBIDO NO CONSOLE.
*/