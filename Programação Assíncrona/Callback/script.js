// EXEMPLO BÁSICO:
console.log('1')

setTimeout(() => {
    console.log(5)
}, 2000);

console.log('2')
console.log('3')
console.log('4')

/*
    EM JAVASCRIPT, UM CALLBACK É UMA FUNÇÃO QUE É PASSADA COMO ARGUMENTO PARA OUTRA FUNÇÃO E É EXECUTADA APÓS A CONCLUSÃO DE UMA DETERMINADA OPERAÇÃO ASSÍNCRONA OU DE ALGUMA OUTRA CONDIÇÃO ESPECÍFICA SER ATENDIDA. OUTRO EXEMPLO:
*/

// FUNÇÃO ASSÍNCRONA Q SIMULA A LEITURA DE UM ARQUIVO:
function lerArquivo(nomeArquivo, callback) {
    // SIMULANDO UMA OPERAÇÃO ASSÍNCRONA COM setTimeout
    setTimeout(function() {
        // SUPONHA Q O CONTEÚDO DO ARQUIVO SEJA "Olá, Mundo!"
        let conteudo = "Olá, Mundo!"

        // CHAMANDO A FUNÇÃO DE CALLBACK E PASSANDO O CONTEÚDO DO ARQUIVO COMO ARGUMENTO
        callback(null, conteudo) // PASSANDO null PARA INDICAR Q NÃO HOUVE ERRO
    }, 2000); // 2 SEGUNDOS DE ATRASO
}

// CHAMANDO A FUNÇÃO lerArquivo COM UM CALLBACK
lerArquivo("arquivo.txt", function(erro, conteudo) {
    // VERIFICANDO SE OCORREU ALGUM ERRO DURANTE A LEITURA DO ARQUIVO
    if (erro) {
        console.error('Erro ao ler o arquivo:', erro)
    } else {
        // IMPRIMINDO O CONTEÚDO DO ARQUIVO
        console.log('Conteúdo do arquivo:', conteudo)
    }
})

/*
    NESTE EXEMPLO, A FUNÇÃO lerArquivo SIMULA A LEITURA DE UM ARQUIVO DE FORMA ASSÍNCRONA USANDO setTimeout. ELA RECEBE DOIS ARGUMENTOS: O NOME DO ARQUIVO E UMA FUNÇÃO DE CALLBACK. APÓS UM ATRASO SIMULADO DE 2 SEGUNDOS, A FUNÇÃO DE CALLBACK É CHAMADA, PASSANDO null PARA INDICAR QUE NÃO HOUVE ERRO (PODERÍAMOS PASSAR UM OBJETO DE ERRO REAL EM CASO DE FALHA) E O CONTEÚDO DO ARQUIVO COMO ARGUMENTO.

    ENTÃO, CHAMAMOS A FUNÇÃO lerArquivo PASSANDO O NOME DO ARQUIVO E UMA FUNÇÃO DE CALLBACK ANÔNIMA COMO ARGUMENTOS. DENTRO DA FUNÇÃO DE CALLBACK, VERIFICAMOS SE OCORREU ALGUM ERRO DURANTE A LEITURA DO ARQUIVO E, SE NÃO, IMPRIMIMOS O CONTEÚDO DO ARQUIVO. ESTE É UM EXEMPLO BÁSICO DE COMO USAR CALLBACKS EM JAVASCRIPT PARA LIDAR COM OPERAÇÕES ASSÍNCRONAS.
*/